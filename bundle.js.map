{"version":3,"file":"bundle.js","mappings":"mBAGA,IAAIA,EACAC,EAAQ,IAAIC,WAAW,IACZ,SAASC,IAEtB,IAAKH,KAGHA,EAAoC,oBAAXI,QAA0BA,OAAOJ,iBAAmBI,OAAOJ,gBAAgBK,KAAKD,SAA+B,oBAAbE,UAAgE,mBAA7BA,SAASN,iBAAkCM,SAASN,gBAAgBK,KAAKC,WAGrO,MAAM,IAAIC,MAAM,4GAIpB,OAAOP,EAAgBC,EACzB,CClBA,8HCMA,EAJA,SAAkBO,GAChB,MAAuB,iBAATA,GAAqB,OAAWA,EAChD,ECIA,IAFA,IAAIC,EAAY,GAEPC,EAAI,EAAGA,EAAI,MAAOA,EACzBD,EAAUE,MAAMD,EAAI,KAAOE,SAAS,IAAIC,OAAO,IAoBjD,MCNA,EApBA,SAAYC,EAASC,EAAKC,GAExB,IAAIC,GADJH,EAAUA,GAAW,CAAC,GACHI,SAAWJ,EAAQX,KAAOA,KAK7C,GAHAc,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBF,EAAK,CACPC,EAASA,GAAU,EAEnB,IAAK,IAAIN,EAAI,EAAGA,EAAI,KAAMA,EACxBK,EAAIC,EAASN,GAAKO,EAAKP,GAGzB,OAAOK,CACT,CAEA,ODRF,SAAmBI,GACjB,IAAIH,EAASI,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,EAG7EZ,GAAQC,EAAUU,EAAIH,EAAS,IAAMP,EAAUU,EAAIH,EAAS,IAAMP,EAAUU,EAAIH,EAAS,IAAMP,EAAUU,EAAIH,EAAS,IAAM,IAAMP,EAAUU,EAAIH,EAAS,IAAMP,EAAUU,EAAIH,EAAS,IAAM,IAAMP,EAAUU,EAAIH,EAAS,IAAMP,EAAUU,EAAIH,EAAS,IAAM,IAAMP,EAAUU,EAAIH,EAAS,IAAMP,EAAUU,EAAIH,EAAS,IAAM,IAAMP,EAAUU,EAAIH,EAAS,KAAOP,EAAUU,EAAIH,EAAS,KAAOP,EAAUU,EAAIH,EAAS,KAAOP,EAAUU,EAAIH,EAAS,KAAOP,EAAUU,EAAIH,EAAS,KAAOP,EAAUU,EAAIH,EAAS,MAAMO,cAMzf,IAAK,EAASf,GACZ,MAAMgB,UAAU,+BAGlB,OAAOhB,CACT,CCPS,CAAUS,EACnB,EClBA,IAsIaQ,EAAW,IAtIxB,wBACI,KAAAC,UAAwB,GACxB,KAAAC,SAAWC,SAASC,eAAe,aACnC,KAAAC,SAAWF,SAASC,eAAe,aACnC,KAAAE,SAAWH,SAASC,eAAe,YAgIvC,QA9HI,YAAAG,WAAA,sBACIC,KAAKH,SAASI,iBAAiB,UAAU,SAACC,GAGtC,GAFAA,EAAMC,iBAEsB,KAAxB,EAAKT,SAASU,MAAlB,CAEA,IAAMC,EAAoB,CACtBC,GAAI,IACJC,KAAM,EAAKb,SAASU,MACpBI,WAAW,GAGf,EAAKC,WAAWJ,GAChB,EAAKK,SAASL,EATwB,CAU1C,GACJ,EAEA,YAAAK,SAAA,SAASC,GACLX,KAAKP,UAAUf,KAAKiC,GAEpBX,KAAKY,iBACT,EAEA,YAAAA,gBAAA,WACI,IAAMC,EAA6BC,KAAKC,UAAUf,KAAKP,WAEvDuB,aAAaC,QAAQ,QAASJ,EAClC,EAEA,YAAAK,aAAA,WACI,IAAMC,EAAQH,aAAaI,QAAQ,SAC9BD,IAELnB,KAAKP,UAAYqB,KAAKO,MAAMF,GAE5BnB,KAAKsB,cACT,EAEA,YAAAA,YAAA,sBACItB,KAAKP,UAAU8B,KAAI,SAACZ,GACR,IAAAJ,EAAwBI,EAAI,KAAtBL,EAAkBK,EAAI,GAAlBH,EAAcG,EAAI,UAEpC,EAAKa,WAAWjB,EAAMD,EAAIE,EAC9B,IACAR,KAAKyB,oBACLzB,KAAK0B,mBACT,EAEA,YAAAjB,WAAA,SAAWE,GACC,IAAAJ,EAAwBI,EAAI,KAAtBL,EAAkBK,EAAI,GAAlBH,EAAcG,EAAI,UAEpCX,KAAKwB,WAAWjB,EAAMD,EAAIE,GAC1BR,KAAKN,SAASU,MAAQ,EAC1B,EAEA,YAAAoB,WAAA,SAAWjB,EAAcD,EAAYE,GACjC,IAAMG,EAAOhB,SAASgC,cAAc,MAC9BC,EAAYjC,SAASgC,cAAc,SACnCE,EAAelC,SAASgC,cAC1B,SAEEG,EAAenC,SAASgC,cAC1B,UAEEjC,EAAWC,SAASgC,cAAc,QAExCjC,EAASqC,YAAcxB,EACvBI,EAAKL,GAAKA,EACVuB,EAAaG,aAAa,OAAQ,YAClCH,EAAaI,QAAUzB,EACvBsB,EAAaxB,GAAK,gBAClBwB,EAAaI,QAAQC,OAAS7B,EAE9BsB,EAAUQ,UAAUC,IAAI,oBACxB3C,EAAS0C,UAAUC,IAAI,mBACvBP,EAAaM,UAAUC,IAAI,uBAC3B1B,EAAKyB,UAAUC,IAAI,wBACnBR,EAAaO,UAAUC,IAAI,oBAE3B1B,EAAK2B,YAAYV,GACjBA,EAAUU,YAAYT,GACtBD,EAAUU,YAAY5C,GACtBkC,EAAUU,YAAYR,GAEtB9B,KAAKF,SAASwC,YAAY3B,EAC9B,EAEA,YAAAe,kBAAA,WACI1B,KAAKF,SAASG,iBAAiB,QAASD,KAAKuC,WAAWnE,KAAK4B,MACjE,EAEA,YAAAuC,WAAA,SAAWrC,GAAX,I,EACUsC,EAAStC,EAAMsC,OAEjBA,EAAON,QAAQC,SAOfnC,KAAKP,UAAUgD,OAVvB,KAKwBhD,UAAUiD,WAClB,SAAC/B,GAAS,OAAAA,EAAKL,KAAOkC,EAAON,QAAQC,MAA3B,IAImB,GAEjB,QAApB,EAAAK,EAAOG,QAAQ,aAAK,SAAEC,SACtB5C,KAAKY,kBAEL4B,EAAOK,oBAAoB,QAAS7C,KAAKuC,YAEjD,EAEA,YAAAd,kBAAA,sBACIzB,KAAKF,SAASG,iBAAiB,UAAU,SAACC,G,MAChCsC,EAAStC,EAAMsC,OACfM,EAAoC,QAApB,EAAAN,EAAOG,QAAQ,aAAK,eAAErC,GAE5C,EAAKb,UAAU8B,KAAI,SAACZ,GACZA,EAAKL,KAAOwC,IACZnC,EAAKH,UAAYgC,EAAOP,QAEhC,IAEA,IAAMpB,EAA6BC,KAAKC,UAAU,EAAKtB,WAEvDuB,aAAaC,QAAQ,QAASJ,EAClC,GACJ,EACJ,EApIA,IAwIArB,EAAS0B,eACT1B,EAASO,Y","sources":["webpack://todo-ts/./node_modules/uuid/dist/esm-browser/rng.js","webpack://todo-ts/./node_modules/uuid/dist/esm-browser/regex.js","webpack://todo-ts/./node_modules/uuid/dist/esm-browser/validate.js","webpack://todo-ts/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://todo-ts/./node_modules/uuid/dist/esm-browser/v4.js","webpack://todo-ts/./src/ts/todo.ts"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { ToDoItem } from './types';\nimport { v4 as uuidV4 } from 'uuid';\n\nclass ToDo {\n    toDoArray: ToDoItem[] = [];\n    taskText = document.getElementById('form-text') as HTMLInputElement;\n    toDoForm = document.getElementById('todo-form') as HTMLFormElement;\n    toDoList = document.getElementById('todo-list') as HTMLUListElement;\n\n    submitForm() {\n        this.toDoForm.addEventListener('submit', (event) => {\n            event.preventDefault();\n\n            if (this.taskText.value === '') return;\n\n            const newTask: ToDoItem = {\n                id: uuidV4(),\n                text: this.taskText.value,\n                completed: false,\n            };\n\n            this.renderTask(newTask);\n            this.saveTask(newTask);\n        });\n    }\n\n    saveTask(task: ToDoItem) {\n        this.toDoArray.push(task);\n\n        this.recordTasksList();\n    }\n\n    recordTasksList() {\n        const toDoArrayStringify: string = JSON.stringify(this.toDoArray);\n\n        localStorage.setItem('tasks', toDoArrayStringify);\n    }\n\n    loadingTasks() {\n        const tasks = localStorage.getItem('tasks');\n        if (!tasks) return;\n\n        this.toDoArray = JSON.parse(tasks);\n\n        this.renderTasks();\n    }\n\n    renderTasks() {\n        this.toDoArray.map((task: ToDoItem) => {\n            const { text, id, completed } = task;\n\n            this.createTask(text, id, completed);\n        });\n        this.statusTaskHandler();\n        this.deleteTaskHandler();\n    }\n\n    renderTask(task: ToDoItem) {\n        const { text, id, completed } = task;\n\n        this.createTask(text, id, completed);\n        this.taskText.value = '';\n    }\n\n    createTask(text: string, id: string, completed: boolean) {\n        const task = document.createElement('li') as HTMLLIElement;\n        const taskLabel = document.createElement('label') as HTMLLabelElement;\n        const taskCheckbox = document.createElement(\n            'input'\n        ) as HTMLInputElement;\n        const deleteButton = document.createElement(\n            'button'\n        ) as HTMLButtonElement;\n        const taskText = document.createElement('span') as HTMLSpanElement;\n\n        taskText.textContent = text;\n        task.id = id;\n        taskCheckbox.setAttribute('type', 'checkbox');\n        taskCheckbox.checked = completed;\n        deleteButton.id = 'delete-button';\n        deleteButton.dataset.taskid = id;\n\n        taskLabel.classList.add('todo__list-label');\n        taskText.classList.add('todo__task-text');\n        deleteButton.classList.add('todo__delete-button');\n        task.classList.add('todo__task-list-item');\n        taskCheckbox.classList.add('todo__task-input');\n\n        task.appendChild(taskLabel);\n        taskLabel.appendChild(taskCheckbox);\n        taskLabel.appendChild(taskText);\n        taskLabel.appendChild(deleteButton);\n\n        this.toDoList.appendChild(task);\n    }\n\n    deleteTaskHandler() {\n        this.toDoList.addEventListener('click', this.deleteTask.bind(this));\n    }\n\n    deleteTask(event: Event) {\n        const target = event.target as HTMLInputElement;\n\n        if (target.dataset.taskid) {\n            const indexOfTask = () => {\n                return this.toDoArray.findIndex(\n                    (task) => task.id === target.dataset.taskid\n                );\n            };\n\n            this.toDoArray.splice(indexOfTask(), 1);\n\n            target.closest('li')?.remove();\n            this.recordTasksList();\n\n            target.removeEventListener('click', this.deleteTask);\n        }\n    }\n\n    statusTaskHandler() {\n        this.toDoList.addEventListener('change', (event: Event) => {\n            const target = event.target as HTMLInputElement;\n            const currentTaskId = target.closest('li')?.id;\n\n            this.toDoArray.map((task) => {\n                if (task.id === currentTaskId) {\n                    task.completed = target.checked;\n                }\n            });\n\n            const toDoArrayStringify: string = JSON.stringify(this.toDoArray);\n\n            localStorage.setItem('tasks', toDoArrayStringify);\n        });\n    }\n}\n\nexport const toDoItem = new ToDo();\n\ntoDoItem.loadingTasks();\ntoDoItem.submitForm();\n"],"names":["getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","uuid","byteToHex","i","push","toString","substr","options","buf","offset","rnds","random","arr","arguments","length","undefined","toLowerCase","TypeError","toDoItem","toDoArray","taskText","document","getElementById","toDoForm","toDoList","submitForm","this","addEventListener","event","preventDefault","value","newTask","id","text","completed","renderTask","saveTask","task","recordTasksList","toDoArrayStringify","JSON","stringify","localStorage","setItem","loadingTasks","tasks","getItem","parse","renderTasks","map","createTask","statusTaskHandler","deleteTaskHandler","createElement","taskLabel","taskCheckbox","deleteButton","textContent","setAttribute","checked","dataset","taskid","classList","add","appendChild","deleteTask","target","splice","findIndex","closest","remove","removeEventListener","currentTaskId"],"sourceRoot":""}